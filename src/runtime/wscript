import os
import waflib.extras.capnproto
from waflib.extras.layout import Product, Component

def name(context):
    return os.path.basename(str(context.path))

publicHeaders = [
    'db_access.hpp',
    'ecs_db.hpp',
    'ecs_db.hh',
    'primitives.hpp',
    'primitives.hh',
    'ram_db.hpp',
    'ram_db.hh',
    'resource.hpp',
    'resource.hh']

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    headerPublishTaskList=[]
    for header in publicHeaders:
	publishTask='publish_%s' % header
	buildCtx(
		name=publishTask,
		rule='cp ${SRC} ${TGT}',
		source=header,
		target=os.path.join(buildCtx.env.component.build_tree.includePathFromBuild(buildCtx), header),
		install_path=os.path.join(buildCtx.env.component.install_tree.include, os.path.dirname(header)))
	headerPublishTaskList.append(publishTask)
    buildCtx.stlib(
	    name='stlib_robocup2Dsim_runtime',
	    source=[buildCtx.path.find_node('ecs_db.cxx'),
		    buildCtx.path.find_node('db_access.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.libPathFromBuild(buildCtx), 'robocup2Dsim_runtime'),
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    install_path=buildCtx.env.component.install_tree.lib,
	    after=headerPublishTaskList)
