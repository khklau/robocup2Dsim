import os
import waflib.extras.capnproto
from waflib.extras.layout import Product, Component

def name(context):
    return os.path.basename(str(context.path))

bcprotocolCapnpFiles=[
	'protocol.capnp']

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    bcprotocolCxxNodeList=[]
    bcprotocolHNodeList=[]
    bcprotocolCapnpTaskList=[]
    for capnpFile in bcprotocolCapnpFiles:
	compileTask='capnp_%s' % capnpFile
	capnpNode=buildCtx.path.find_node(capnpFile)
	cxxNode=capnpNode.change_ext('.capnp.c++').get_bld()
	hNode=capnpNode.change_ext('.capnp.h').get_bld()
	waflib.extras.capnproto.define_task_gen(buildCtx,
		name=compileTask,
		source=[capnpNode],
		target=[cxxNode, hNode],
		includes=['.', buildCtx.srcnode.abspath()])
	bcprotocolCxxNodeList.append(cxxNode)
	bcprotocolHNodeList.append(hNode)
	bcprotocolCapnpTaskList.append(compileTask)
	buildCtx(
		rule='cp ${SRC} ${TGT}',
		source=hNode,
		target=os.path.join(buildCtx.env.component.build_tree.includePathFromBuild(buildCtx), os.path.basename(str(hNode))),
		after=compileTask)
    buildCtx.stlib(
	    name='stlib_robocup2Dsim_bcprotocol',
	    source=bcprotocolCxxNodeList,
	    target='bcprotocol',
	    includes=['.', os.path.join(buildCtx.path.get_bld().abspath(), os.pardir, 'core'), buildCtx.bldnode.abspath()] + buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['CAPNPROTO_STLIB'],
	    install_path=buildCtx.env.component.install_tree.test,
	    after=['shlib_robocup2Dsim_core'] + bcprotocolCapnpTaskList)

def install(installCtx):
    installCtx.env.component = installCtx.env.product.getComponent(name(installCtx))
