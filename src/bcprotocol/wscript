import os
import waflib.extras.capnproto
from waflib.extras.layout import Product, Component

def name(context):
    return os.path.basename(str(context.path))

bcprotocolCapnpFiles=[
	'control.capnp',
	'info.capnp',
	'protocol.capnp',
	'sensor.capnp']

publicHeaders = [
    'protocol.hpp']

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    bcprotocolCxxNodeList=[]
    bcprotocolHNodeList=[]
    bcprotocolCapnpTaskList=[]
    bcprotocolPublishTaskList=[]
    for capnpFile in bcprotocolCapnpFiles:
	compileTask='capnp_%s' % capnpFile
	capnpNode=buildCtx.path.find_node(capnpFile)
	cxxNode=capnpNode.change_ext('.capnp.c++').get_bld()
	hNode=capnpNode.change_ext('.capnp.h').get_bld()
	waflib.extras.capnproto.define_task_gen(buildCtx,
		name=compileTask,
		source=[capnpNode],
		target=[cxxNode, hNode],
		includes=[buildCtx.path.get_src().abspath(), buildCtx.srcnode.find_node('src').abspath()])
	publishTask='publish_%s.h' % capnpFile
	buildCtx(
		name=publishTask,
		rule='cp ${SRC} ${TGT}',
		source=hNode,
		target=os.path.join(buildCtx.env.component.build_tree.includePathFromBuild(buildCtx), os.path.basename(str(hNode))),
		after=compileTask)
	bcprotocolCxxNodeList.append(cxxNode)
	bcprotocolHNodeList.append(hNode)
	bcprotocolCapnpTaskList.append(compileTask)
	bcprotocolPublishTaskList.append(publishTask)
    publishTaskList=[]
    for header in publicHeaders:
	publishTask='publish_%s' % header
	buildCtx(
		name=publishTask,
		rule='cp ${SRC} ${TGT}',
		source=header,
		target=os.path.join(buildCtx.env.component.build_tree.includePathFromBuild(buildCtx), header),
		after=bcprotocolPublishTaskList,
		install_path=os.path.join(buildCtx.env.component.install_tree.include, os.path.dirname(header)))
    buildCtx.stlib(
	    name='stlib_robocup2Dsim_bcprotocol',
	    source=bcprotocolCxxNodeList,
	    target=os.path.join(buildCtx.env.component.build_tree.libPathFromBuild(buildCtx), 'robocup2Dsim_bcprotocol'),
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    libpath=buildCtx.env.component.lib_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['CAPNPROTO_STLIB', 'stlib_robocup2Dsim_common'],
	    install_path=buildCtx.env.component.install_tree.lib,
	    after=['stlib_robocup2Dsim_common'] + bcprotocolPublishTaskList)
